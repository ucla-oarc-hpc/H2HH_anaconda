---
title: "Hoffman2 Happy Hour: Anaconda for HPC"
author: "Charles Peterson"
data: "Sep 21, 2022"
format: 
  revealjs: 
    transition: slide
    theme: simple
    scrollable: true
    self-contained: true
editor_options: 
  markdown: 
    wrap: 72
---

## Overview

![](H2HH.png){.absolute top="0" right="0"}


Welcome to Hoffman2 Happy Hour!

The H<sup>2</sup>HH are designed to be short interactive talks that focus on a certain aspect of HPC.

::: columns
::: {.column .fragment width="60%" style="font-size: 0.75em"}

</br>

- In this H<sup>2</sup>HH we will go over using Anaconda on Hoffman2   

</br>

- This information can be applied to other HPC resources


:::

::: {.column .fragment width="40%" style="font-size: 0.60em"}

:::{style="text-align: center"}
<img src="fullpic.png"/ width="30%">
:::

Any suggestions for upcoming workshops, email me at
[cpeterson\@oarc.ucla.edu](mailto:cpeterson@oarc.ucla.edu){.email}

:::
:::

## Files for this Presentation

::: {style="font-size: 0.75em"}

This presentation can be found on our UCLA OARC's github repo.

- <https://github.com/ucla-oarc-hpc/H2HH_anaconda>

View slides:

- PDF format: `H2HH_anaconda.pdf`

- html format: 
  - The html sildes can be viewed at:
  - <https://ucla-oarc-hpc.github.io/H2HH_anaconda>

:::{.callout-note}

This presentation was built with [Quarto](https://quarto.org/) and RStudio.

- Quarto file: `H2HH_anaconda.qmd`

:::

:::

## What is Anaconda

::: columns
::: {.column  width="60%" style="font-size: 0.80em"}

- Anaconda is a very popular Python and R distribution tool.

</br>

- Great option for simplifying package management and pipelines.

</br>

- Easily install popular Python and R packages.

::: 
::: {.column width="40%" style="text-align: center"}

</br>

![](Anaconda_Logo.png)

::: 
::: 

## Why use Anaconda

::: {.incremental style="font-size: 0.95em"}

- Easy install many python and R packages with simple `conda` commands

- Create isolated python/R environments for different projects
  - Different python/R setups and switch between them

- Checks and solve for possible version conflicts when installing packages

- Share conda env on different systems. 
  - Version control!

:::

## Starting Anaconda

::: {style="font-size: 0.75em" }

On Hoffman2, Anaconda is installed and can be used by loading modules

- See available anaconda versions

```{.bash }
module av anaconda
```

- Load anaconda in your environment

```{.bash }
module load anaconda3/2020.11
```

- Loading the anaconda module will setup anaconda in your environment and ready to be used!

::: {.fragment}
::: { .callout-important}

By using anaconda, you do **NOT** need to load any other python/R modules. The python/R builds will be available via anaconda.

Using other python build might cause conflicts with your anaconda python (or R)

:::
:::
:::

## Anaconda environment

::: {.incremental style="font-size: 0.75em" }

- Anaconda environments (conda env) is a virtual environment
  - install and update packages that you can control
  
- These conda env's will reside in your personal workspace
  - By default `$HOME/.conda`

- Conda is also a package manager
  - Many packages/software can be installed via Conda's repository 
  - <https://anaconda.org/anaconda/repo>

- Can also install python packages within your conda env outside of Conda's repo
  - PyPI's `pip` for python
  - R's CRAN software repository

:::

## Creating conda env

::: { style="font-size: 0.85em" }

Creating a new conda environment

```{.bash }
conda create [options]
conda create -n myconda
```

- The `-n` option will name your new conda env

::: {.fragment}

You can install packages and software while creating the env

```{.bash }
conda create -n myconda python
```

:::
::: {.fragment}

Install multiple conda packages with `conda create` command

```{.bash}
conda create -n myconda python=3.9 pandas scipy r-base
```

This will install 

::: { style="font-size: 0.65em" }
- python version 3.9
- scipy 
- R

:::
:::
:::

## Conda envs

::: { style="font-size: 0.85em" }

See list of all your environments that you have created

```{.bash }
conda env list
```

Start (activate) your conda environment

```{.bash }
conda activate myconda
```

Activating the conda env gives access to the software within the env

This version of `python` and `R` is installed locally in your conda env and is different from the builds of python on Hoffman2. 

You can see location of python in your env and check the version.

```{.bash }
which python
python -V
```

::: { style="font-size: 0.75em" }
::: { .callout-important}

You do **NOT** need to load the python module if you installed python via anaconda.

:::
:::
:::

## Tips for running on HPC
::: { style="font-size: 0.90em" }

You may be familiar with using Anaconda on your local machine. 

- Running on HPC may be different.

::: {.fragment}
:::{.callout-warning}
Do not use conda's default `base` env
:::
:::
::: {.fragment}
When conda is installed, it creates a conda env named `base` that you may see when running `conda env list`

- Located in the central anaconda installation path **CANNOT** be modified by users

:::
:::

## Tips for running on HPC

::: { style="font-size: 0.80em" }

:::{.callout-warning}
Do not run `conda init` on H2. 
:::

You may see messages or online tips about running the `conda init` command.

</br> 

This initializes conda but is **NOT NEEDED** to run on Hoffman2

While this does setup conda, it will change ~/.bashrc and may cause conflicts using different versions/envs.

</br> 

Loading the anaconda module will already setup conda.

:::

## Installing packages 

::: { style="font-size: 0.90em" }

Once your conda env is activated, you can install more packages with

- `conda install`

```{.bash}
conda create -n myconda
conda activate myconda
conda install python=3.9 pandas scipy tensorflow -c conda-forge
```

::: {.fragment}
::: {.callout-note}

The `-c` option in conda is for the "conda channel". The conda channels are different locations where packages are stored. Examples are 'conda-forge', 'bioconda', 'defaults', etc. Conda will search through the available channels for the request packages to install.

:::
:::
:::

## Installing packages 

You can use `pip` when you are in a conda env

```{.bash}
conda activate myconda
pip3 install scipy
```

:::{.callout-tip}

When using pip/pip3 in a conda env, you do **NOT** need to have `--user`. Using just `pip` will install the package inside the conda env. If you use `--user`, it will install the package in outside of the conda env, inside of `~/.local` and may cause conflicts with other python builds or conda env's you have.

:::


## Tips

By default, when you install a conda env, it will install it at `~/.conda`

You can change this location, esp if you are low in space at `$HOME`

```{.bash }
conda create -p $SCRATCH/mypython python=3.9
conda activate $SCRATCH/mypython
```

- Some detailed information on using Anaconda on Hoffman2 can be found on our website 

::: { style="font-size: 0.70em" }

- [https://www.hoffman2.idre.ucla.edu/Using-H2/Software/Software.html#anaconda](https://www.hoffman2.idre.ucla.edu/Using-H2/Software/Software.html#anaconda )

:::

## Job examples

Example: Using Pytorch to fit a polynomial function from a sin function 

File: `pytorch_ex.py`

::: { style="font-size: 0.80em" }

:::{.fragment}

- Start an interactive session

```{.bash }
qrsh -l h_data=5G
```

:::
:::{.fragment}

- Create conda env

```{.bash}
module load anaconda3/2020.11
conda create -n mypytorch
```

:::
:::{.fragment}

- Activate env and install pytorch

```{.bash}
conda activate mypytorch
conda install python=3.8 pytorch torchvision torchaudio cpuonly -c pytorch
```

:::
:::{.fragment}

- Run python 

```{.bash}
python pytorch_ex.py
```

:::
:::

## Job script example

::: { style="font-size: 0.80em" }

- pytorch_ex.job

```{.bash }
#!/bin/bash
#$ -cwd
#$ -j y
#$ -l h_rt=1:00:00,h_data=5G
#$ -pe shared 1

# load the anaconda module
. /u/local/Modules/default/init/modules.sh
module load anaconda3/2020.11

# Activate the 'mypytorch' conda env
conda activate mypytorch

#Running python code
python pytorch_ex.py > pytorch_ex.out
```

The `mypytorch` conda env has already been created

:::{.fragment}

- Run job

```{.bash}
qsub pytorch_ex.job
```

:::
:::

## Searching for anaconda packages


Find software that is available on Anaconda's package repo

- [https://anaconda.org/anaconda/repo](https://anaconda.org/anaconda/repo)

Here, you can search for software and other packages. It will also explain what conda commands you will need in order to install them to your conda env.


## Using yml files

You can create a conda file from a `environment.yml` file

```{.bash }
name: myconda
dependencies:
  - numpy
  - pandas
  - python=3.9
```

You can create a conda env with all these packages by running:

```{.bash }
conda env create -f environment.yml
```

## Using yml files

::: { style="font-size: 0.85em" }

An `.yml` file can be created from an existing conda env so you can create the same conda env.

```{.bash }
conda activate myconda
conda env export > environment.yml
```

This file can be shared with others to reproduce any conda env. 

 - Keep the same versions of packages when running anaconda on different HPC resources

::: {.fragment}
::: {.callout-tip}

We have a collection of `.yml` files that we made to use on Hoffman2

[https://github.com/ucla-oarc-hpc/hpc_conda](https://github.com/ucla-oarc-hpc/hpc_conda)

:::
:::
:::

## Installing Anaconda 

::: { style="font-size: 0.75em" }

While Hoffman2 already has Anaconda installed, you may need to install Anaconda on a separate machine or another HPC resource.

Visit [https://repo.anaconda.com/archive/](https://repo.anaconda.com/archive/) for all the versions of Anaconda that are available.

:::{.fragment}

In this example, anaconda is install at `$HOME/apps/anaconda/2021.11`

```{.bash }
#Download anaconda script for Linux
wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh
#Run Anaconda installer
bash Anaconda3-2021.11-Linux-x86_64.sh -p $HOME/apps/anaconda/2021.11 -b
```

:::

:::{.fragment}

</br>

Now create and activate a conda env with this new anaconda build


```{.bash }
# Setup Anaconda 
source $HOME/apps/anaconda/2021.11/etc/profile.d/conda.sh
# Create new conda env
conda create -n myconda python=3.9
conda activate myconda
```
:::
:::

## Installing Anaconda 

:::{.callout-tip}

Don't run `conda init`

Instead, `source /CONDA/PATH/etc/profile.d/conda.sh`

This will setup Anaconda without changing the ~/.bashrc file

:::

:::{.callout-tip}

[Miniconda](https://docs.conda.io/en/latest/miniconda.html) is a good alternative to Anaconda.

It is a Minimal installer for conda that is smaller than Anaconda.

:::

# Thank you!

::: { style="font-size: 0.70em" }

Questions? Comments?

Charles Peterson

- [cpeterson\@oarc.ucla.edu](mailto:cpeterson@oarc.ucla.edu){.email}

- Look at for more Hoffman2 workshops at [https://idre.ucla.edu/calendar ](https://idre.ucla.edu/calendar)

  - Search for `HPC`

![](padfoot.jpeg){width="800" height="450"}
:::
